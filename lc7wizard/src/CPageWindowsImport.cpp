#include"stdafx.h"
#include"../../lc7importwin/include/uuids.h"

CPageWindowsImport::CPageWindowsImport(QWidget *parent)
	: CLC7WizardPage(parent), m_buttongroup(this)
{
	TR;
	setTitle(tr("Windows Import"));
	//setPixmap(QWizard::WatermarkPixmap, QPixmap(":/images/watermark.png"));

	QLabel *topLabel = new QLabel(tr(
		"Choose a source from which to retrieve the Windows hashes:"
		));
	topLabel->setWordWrap(true);

	m_importLocalRadioButton = new CLabelRadioButton(tr("<b>The &local machine</b><br>Requires local administrative privileges."));
	WIZARD_CONNECT_BUTTON(m_importLocalRadioButton->radioButton());
	m_importRemoteSMBRadioButton = new CLabelRadioButton(tr("<b>A &remote machine</b><br>Requires admin privileges on the remote machine, or the domain if this is a domain controller.<br>The remote machine must have remote administration enabled. Refer to the LC7 documentation for a walkthrough. To simplify this process, you can <a href=\"#remoteagent\">manually create a remote agent</a> for installation on the target machine."));
	WIZARD_CONNECT_BUTTON(m_importRemoteSMBRadioButton->radioButton())
	m_importPWDumpRadioButton = new CLabelRadioButton(tr("<b>A &file generated by PWDump, FGDump or compatible tool</b>"));
	WIZARD_CONNECT_BUTTON(m_importPWDumpRadioButton->radioButton())

	connect(m_importRemoteSMBRadioButton->label(), &QLabel::linkActivated, this, &CPageWindowsImport::slot_linkActivated_createRemoteAgent);
	m_importRemoteSMBRadioButton->label()->setOpenExternalLinks(false);

	m_buttongroup.addButton(m_importLocalRadioButton->radioButton());
	m_buttongroup.addButton(m_importRemoteSMBRadioButton->radioButton());
	m_buttongroup.addButton(m_importPWDumpRadioButton->radioButton());

	m_importLocalRadioButton->radioButton()->setChecked(true);

	registerField("import_windows_local", m_importLocalRadioButton->radioButton());
	registerField("import_windows_remote_smb", m_importRemoteSMBRadioButton->radioButton());
	registerField("import_windows_pwdump", m_importPWDumpRadioButton->radioButton());

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addWidget(topLabel);
	layout->addWidget(m_importLocalRadioButton);
	layout->addWidget(m_importRemoteSMBRadioButton);
	layout->addWidget(m_importPWDumpRadioButton);
	setLayout(layout);

	UpdateUI();
}

int CPageWindowsImport::nextId() const
{
	TR;
	if (m_importLocalRadioButton->radioButton()->isChecked())
	{
		return CLC7Wizard::Page_Windows_Import_Local;
	}
	if (m_importRemoteSMBRadioButton->radioButton()->isChecked())
	{
		return CLC7Wizard::Page_Windows_Import_Remote_SMB;
	}

	return CLC7Wizard::Page_Windows_Import_PWDump;
}

bool CPageWindowsImport::isComplete() const
{
	TR;
	if (m_importLocalRadioButton->radioButton()->isChecked() ||
		m_importRemoteSMBRadioButton->radioButton()->isChecked() ||
		m_importPWDumpRadioButton->radioButton()->isChecked())// ||
	{
		return true;
	}

	return false;
}


void CPageWindowsImport::slot_linkActivated_createRemoteAgent(const QString &)
{
	TR;
	
	ILC7Component *importwinremotegui = g_pLinkage->FindComponentByID(UUID_IMPORTWINDOWSREMOTEGUI);
	if (!importwinremotegui)
	{
		Q_ASSERT(0);
		return;
	}

	QString error;
	importwinremotegui->ExecuteCommand("generateremoteagent", QStringList(), QMap<QString, QVariant>(), error, NULL);
}

void CPageWindowsImport::UpdateUI()
{
	TR;
}